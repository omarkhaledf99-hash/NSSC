// <auto-generated />
using System;
using FactoryTracking.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FactoryTracking.API.Migrations
{
    [DbContext(typeof(FactoryTrackingDbContext))]
    [Migration("20250912180749_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("FactoryTracking.API.Models.CheckPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QRCode")
                        .IsUnique();

                    b.ToTable("CheckPoints");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2732ffe4-0d6a-47c0-a67f-afd49ae7eda4"),
                            CreatedAt = new DateTime(2025, 9, 12, 18, 7, 49, 527, DateTimeKind.Utc).AddTicks(4270),
                            IsActive = true,
                            Location = "Building 1, Floor 1",
                            Name = "Assembly Line A - Start",
                            QRCode = "QR_ASSEMBLY_A_START"
                        },
                        new
                        {
                            Id = new Guid("0fce2f25-da54-475b-a6b3-cbab5dfd9679"),
                            CreatedAt = new DateTime(2025, 9, 12, 18, 7, 49, 527, DateTimeKind.Utc).AddTicks(4270),
                            IsActive = true,
                            Location = "Building 1, Floor 2",
                            Name = "Quality Control Station",
                            QRCode = "QR_QUALITY_CONTROL"
                        },
                        new
                        {
                            Id = new Guid("4463e280-c432-4d1d-8b99-99a8573cc46c"),
                            CreatedAt = new DateTime(2025, 9, 12, 18, 7, 49, 527, DateTimeKind.Utc).AddTicks(4280),
                            IsActive = true,
                            Location = "Building 2, Floor 1",
                            Name = "Packaging Department",
                            QRCode = "QR_PACKAGING_DEPT"
                        },
                        new
                        {
                            Id = new Guid("a503a7a9-0eef-4a4f-9a91-0f2e03593d2a"),
                            CreatedAt = new DateTime(2025, 9, 12, 18, 7, 49, 527, DateTimeKind.Utc).AddTicks(4280),
                            IsActive = true,
                            Location = "Main Entrance",
                            Name = "Safety Equipment Check",
                            QRCode = "QR_SAFETY_EQUIPMENT"
                        },
                        new
                        {
                            Id = new Guid("4469f8b0-43b6-4748-a1df-773701ca6c86"),
                            CreatedAt = new DateTime(2025, 9, 12, 18, 7, 49, 527, DateTimeKind.Utc).AddTicks(4300),
                            IsActive = true,
                            Location = "Building 3, Loading Bay",
                            Name = "Warehouse Exit",
                            QRCode = "QR_WAREHOUSE_EXIT"
                        });
                });

            modelBuilder.Entity("FactoryTracking.API.Models.CheckPointLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CheckPointId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrls")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CheckPointId");

                    b.HasIndex("UserId");

                    b.ToTable("CheckPointLogs");
                });

            modelBuilder.Entity("FactoryTracking.API.Models.LoginLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginLogs");
                });

            modelBuilder.Entity("FactoryTracking.API.Models.StopCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrls")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StopCards");
                });

            modelBuilder.Entity("FactoryTracking.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36ee7105-8498-458b-af27-0f47bbf5deb4"),
                            CreatedAt = new DateTime(2025, 9, 12, 18, 7, 49, 394, DateTimeKind.Utc).AddTicks(3580),
                            Email = "admin@factory.com",
                            FullName = "System Administrator",
                            IsActive = true,
                            PasswordHash = "$2a$11$FlCuKAoCmM5nLEKEt9d5z.65TglR6hNryD9Tkz8RfZXVOp2WU5pXe",
                            Role = 1
                        },
                        new
                        {
                            Id = new Guid("bd5c0530-057f-493a-966e-4cb8c07ee671"),
                            CreatedAt = new DateTime(2025, 9, 12, 18, 7, 49, 527, DateTimeKind.Utc).AddTicks(3930),
                            Email = "user@factory.com",
                            FullName = "Test User",
                            IsActive = true,
                            PasswordHash = "$2a$11$dbkf4YcA18mrny/1vh/0FuBqRTBr93b0F1fRMJaCYsVPOnT1yyh1S",
                            Role = 0
                        });
                });

            modelBuilder.Entity("FactoryTracking.API.Models.CheckPointLog", b =>
                {
                    b.HasOne("FactoryTracking.API.Models.CheckPoint", "CheckPoint")
                        .WithMany("CheckPointLogs")
                        .HasForeignKey("CheckPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FactoryTracking.API.Models.User", "User")
                        .WithMany("CheckPointLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CheckPoint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FactoryTracking.API.Models.LoginLog", b =>
                {
                    b.HasOne("FactoryTracking.API.Models.User", "User")
                        .WithMany("LoginLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FactoryTracking.API.Models.StopCard", b =>
                {
                    b.HasOne("FactoryTracking.API.Models.User", "User")
                        .WithMany("StopCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FactoryTracking.API.Models.CheckPoint", b =>
                {
                    b.Navigation("CheckPointLogs");
                });

            modelBuilder.Entity("FactoryTracking.API.Models.User", b =>
                {
                    b.Navigation("CheckPointLogs");

                    b.Navigation("LoginLogs");

                    b.Navigation("StopCards");
                });
#pragma warning restore 612, 618
        }
    }
}
