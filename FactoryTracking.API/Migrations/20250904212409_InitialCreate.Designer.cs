// <auto-generated />
using System;
using FactoryTracking.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FactoryTracking.API.Migrations
{
    [DbContext(typeof(FactoryTrackingDbContext))]
    [Migration("20250904212409_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("FactoryTracking.API.Models.CheckPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QRCode")
                        .IsUnique();

                    b.ToTable("CheckPoints");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37ecfb59-c8c6-4a80-a12a-c1abf2aacfb6"),
                            CreatedAt = new DateTime(2025, 9, 4, 21, 24, 9, 528, DateTimeKind.Utc).AddTicks(2290),
                            IsActive = true,
                            Location = "Building 1, Floor 1",
                            Name = "Assembly Line A - Start",
                            QRCode = "QR_ASSEMBLY_A_START"
                        },
                        new
                        {
                            Id = new Guid("4efe5eab-e14e-45d9-8573-4d26edc4736d"),
                            CreatedAt = new DateTime(2025, 9, 4, 21, 24, 9, 528, DateTimeKind.Utc).AddTicks(2300),
                            IsActive = true,
                            Location = "Building 1, Floor 2",
                            Name = "Quality Control Station",
                            QRCode = "QR_QUALITY_CONTROL"
                        },
                        new
                        {
                            Id = new Guid("901368bb-1299-43da-9ecf-d2a115deb100"),
                            CreatedAt = new DateTime(2025, 9, 4, 21, 24, 9, 528, DateTimeKind.Utc).AddTicks(2300),
                            IsActive = true,
                            Location = "Building 2, Floor 1",
                            Name = "Packaging Department",
                            QRCode = "QR_PACKAGING_DEPT"
                        },
                        new
                        {
                            Id = new Guid("bc32af2c-af51-4b4b-8626-51aab56b3c41"),
                            CreatedAt = new DateTime(2025, 9, 4, 21, 24, 9, 528, DateTimeKind.Utc).AddTicks(2310),
                            IsActive = true,
                            Location = "Main Entrance",
                            Name = "Safety Equipment Check",
                            QRCode = "QR_SAFETY_EQUIPMENT"
                        },
                        new
                        {
                            Id = new Guid("46d369e1-6383-43f2-949f-0f5ea7014c42"),
                            CreatedAt = new DateTime(2025, 9, 4, 21, 24, 9, 528, DateTimeKind.Utc).AddTicks(2320),
                            IsActive = true,
                            Location = "Building 3, Loading Bay",
                            Name = "Warehouse Exit",
                            QRCode = "QR_WAREHOUSE_EXIT"
                        });
                });

            modelBuilder.Entity("FactoryTracking.API.Models.CheckPointLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CheckPointId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrls")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CheckPointId");

                    b.HasIndex("UserId");

                    b.ToTable("CheckPointLogs");
                });

            modelBuilder.Entity("FactoryTracking.API.Models.LoginLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginLogs");
                });

            modelBuilder.Entity("FactoryTracking.API.Models.StopCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrls")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StopCards");
                });

            modelBuilder.Entity("FactoryTracking.API.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a876fd5d-3513-45ab-8349-1b4fff7574d5"),
                            CreatedAt = new DateTime(2025, 9, 4, 21, 24, 9, 528, DateTimeKind.Utc).AddTicks(2160),
                            Email = "admin@factory.com",
                            FullName = "System Administrator",
                            IsActive = true,
                            PasswordHash = "$2a$11$eAAikS85ytbTfd8YRIoFI.sQaSzCEJgsHclzMS4KG7kK/Y/6F4YBu",
                            Role = 1
                        });
                });

            modelBuilder.Entity("FactoryTracking.API.Models.CheckPointLog", b =>
                {
                    b.HasOne("FactoryTracking.API.Models.CheckPoint", "CheckPoint")
                        .WithMany("CheckPointLogs")
                        .HasForeignKey("CheckPointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FactoryTracking.API.Models.User", "User")
                        .WithMany("CheckPointLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CheckPoint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FactoryTracking.API.Models.LoginLog", b =>
                {
                    b.HasOne("FactoryTracking.API.Models.User", "User")
                        .WithMany("LoginLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FactoryTracking.API.Models.StopCard", b =>
                {
                    b.HasOne("FactoryTracking.API.Models.User", "User")
                        .WithMany("StopCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FactoryTracking.API.Models.CheckPoint", b =>
                {
                    b.Navigation("CheckPointLogs");
                });

            modelBuilder.Entity("FactoryTracking.API.Models.User", b =>
                {
                    b.Navigation("CheckPointLogs");

                    b.Navigation("LoginLogs");

                    b.Navigation("StopCards");
                });
#pragma warning restore 612, 618
        }
    }
}
